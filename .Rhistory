confNetFunc<-function(mat,IndpThs=0.1)
{
d<-dim(mat)[2]
confNet<-matrix(0,nrow=d,ncol=d)
D<-VecAlignment(mat)
confValMat<-matrix(0,nrow=d,ncol=d)
#===
for(i in seq(d-1))
for(j in seq(i+1,d))
{
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP # conf(y|z)
b1<-CondProb(D,y=z,z=y)$condP # conf(z|y)
confValMat[i,j]<-a1
confValMat[j,i]<-b1
if((a1-b1)>0 && a1>=IndpThs)
confNet[i,j]<-1
else if((b1-a1)>0 && b1>= IndpThs)
confNet[j,i]<-1
else
confNet[i,j]<-0
}
return(list(confNet=confNet,confValMat=confValMat) )
}
# set.seed(2022)
seedN<-2022
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-confNetFunc(mat=mat,IndpThs=0.9)
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
cMat<- resC$CausalGRes$Ehat
print("proposed method trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
print("proposed method directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
devtools::install_github('9POINTEIGHT/MPI')
library(readr)
twin_pairs_T_3years_samesex <- read_csv("twin_pairs_T_3years_samesex.csv")
View(twin_pairs_T_3years_samesex)
twin_pairs_T_3years_samesex[1]
twin_pairs_T_3years_samesex[1,1]
twin_pairs_T_3years_samesex[1,2]
twin_pairs_T_3years_samesex[1,3]
quantile(twin_pairs_T_3years_samesex[2,],c(0.5))
quantile(twin_pairs_T_3years_samesex[2,],c(0.25))
quantile(twin_pairs_T_3years_samesex[2,],c(0.20))
quantile(twin_pairs_T_3years_samesex[2,],c(0.10))
quantile(twin_pairs_T_3years_samesex[2,],c(0.25))
quantile(c(twin_pairs_T_3years_samesex[2,],twin_pairs_T_3years_samesex[2,]),c(0.25))
quantile(c(t(twin_pairs_T_3years_samesex[2,]),t(twin_pairs_T_3years_samesex[2,]),c(0.25))
;
quantile(c(t(twin_pairs_T_3years_samesex[2,]),t(twin_pairs_T_3years_samesex[2,]) ),c(0.25))
quantile(c(t(twin_pairs_T_3years_samesex[2,]),t(twin_pairs_T_3years_samesex[2,]) ),c(0.5))
quantile(c(t(twin_pairs_T_3years_samesex[2,]),t(twin_pairs_T_3years_samesex[2,]) ),c(0.25))
quantile(c(t(twin_pairs_T_3years_samesex[2,]),t(twin_pairs_T_3years_samesex[3,]) ),c(0.25))
quantile(twin_pairs_T_3years_samesex[3,],c(0.25))
quantile(twin_pairs_T_3years_samesex[2,],c(0.25))
sum(twin_pairs_T_3years_samesex[2,] <=1000)
sum(twin_pairs_T_3years_samesex[3,] <=1000)
sum(twin_pairs_T_3years_samesex[3,] <=2000)
sum(twin_pairs_T_3years_samesex[3,] <=3000)
min( twin_pairs_T_3years_samesex[3,] )
min( twin_pairs_T_3years_samesex[2,] )
min( t(twin_pairs_T_3years_samesex[2,]) )
max( t(twin_pairs_T_3years_samesex[2,]) )
max( t(twin_pairs_T_3years_samesex[3,]) )
max( t(twin_pairs_T_3years_samesex[1,]) )
twin_pairs_T_3years_samesex[1,]
twin_pairs_T_3years_samesex[,1]
twin_pairs_T_3years_samesex[,2]
min( twin_pairs_T_3years_samesex[,1] )
min( twin_pairs_T_3years_samesex[,2] )
min( twin_pairs_T_3years_samesex[,3] )
max( twin_pairs_T_3years_samesex[,3] )
max( twin_pairs_T_3years_samesex[,2] )
percentile( twin_pairs_T_3years_samesex[,2], 0.25 )
percentile( twin_pairs_T_3years_samesex[,2], c(0.25) )
quantile( twin_pairs_T_3years_samesex[,2], c(0.25) )
quantile( twin_pairs_T_3years_samesex[,3], c(0.25) )
quantile( t(twin_pairs_T_3years_samesex[,3]), c(0.25) )
quantile( t(twin_pairs_T_3years_samesex[,2]), c(0.25) )
quantile( t(twin_pairs_T_3years_samesex[,2]), c(0.5) )
quantile( t(twin_pairs_T_3years_samesex[,3]), c(0.5) )
sum( t(twin_pairs_T_3years_samesex[,3])<=1000 )
sum( t(twin_pairs_T_3years_samesex[,3])<=2000 )
sum( t(twin_pairs_T_3years_samesex[,3])<=1000 )
sum( t(twin_pairs_T_3years_samesex[,3])<=3000 )
sum( t(twin_pairs_T_3years_samesex[,3])<=4000 )
library(readr)
twin_pairs_T_3years_samesex <- read_csv("twin_pairs_T_3years_samesex.csv")
View(twin_pairs_T_3years_samesex)
library(readr)
twin_pairs_Y_3years_samesex <- read_csv("twin_pairs_Y_3years_samesex.csv")
View(twin_pairs_Y_3years_samesex)
sum(twin_pairs_Y_3years_samesex[,2])
sum(twin_pairs_Y_3years_samesex[,3])
sum(twin_pairs_T_3years_samesex[,3]>3000)
sum(twin_pairs_T_3years_samesex[,3]<=3000)
sum(twin_pairs_T_3years_samesex[,3]<=1500)
sum(twin_pairs_T_3years_samesex[,3]<=3000)
sum(twin_pairs_T_3years_samesex[,3]>3000)
sum(twin_pairs_T_3years_samesex[,3]<2000)
sum(twin_pairs_T_3years_samesex[,3]<2000)
sum(twin_pairs_T_3years_samesex[,3]<2500)
sum(twin_pairs_T_3years_samesex[,3]<3000)
sum(twin_pairs_T_3years_samesex[,3]<2500)
TWIN_W<-read.csv(file="twin_pairs_Y_3years_samesex.csv")
TWIN_W[,1]
TWIN_W[,2]
TWIN_W[,3]
TWIN_Y<-read.csv(file="twin_pairs_Y_3years_samesex.csv")
TWIN_W<-read.csv(file="twin_pairs_T_3years_samesex.csv")
TWIN_W[,3]
TWIN_W[,2]
dim(TWIN_Y)
dim(TWIN_Y)[1]
dim(TWIN_W)[1]
TWIN_Y<-read.csv(file="twin_pairs_Y_3years_samesex.csv")
TWIN_W<-read.csv(file="twin_pairs_T_3years_samesex.csv")
n<-dim(TWIN_Y)[1]
ths<-2500
#1:w<=ths both, 2:w<=ths one, 3: w<=ths none, 4:die both, 5: die one, 6: die none
TWINmat<-matrix(0,nrow=n,ncol=6)
View(TWINmat)
a=b=1
1&1
1&2
1&0
1|0
!0
!1
xor(0,1)
xor(1,1)
and(1,2)
TWIN_Y[1,2]
TWIN_Y[1,3]
TWIN_Y[100,3]
TWIN_Y[100,1]
for(i in seq(n))
{
flag1=flag2=0
if(TWIN_W[i,2]<=ths)
flag1<-1
if(TWIN_W[i,3]<=ths)
flag2<-1
TWINmat[i,1]<- flag1 & flag2
TWINmat[i,2]<- xor(flag1 , flag2)
TWINmat[i,3]<- !flag1 & !flag2
TWINmat[i,4]<- TWIN_Y[i,2] & TWIN_Y[i,3]
TWINmat[i,5]<- xor(TWIN_Y[i,2] , TWIN_Y[i,3])
TWINmat[i,6]<- !TWIN_Y[i,2] & !TWIN_Y[i,3]
}
write(TWINmat,file="TWINmat.Rdata")
View(TWINmat)
sum(TWINmat[,4])
TWIN_Y<-read.csv(file="twin_pairs_Y_3years_samesex.csv")
TWIN_W<-read.csv(file="twin_pairs_T_3years_samesex.csv")
n<-dim(TWIN_Y)[1]
ths<-1000
#1:w<=ths both, 2:w<=ths one, 3: w<=ths none, 4:die both, 5: die one, 6: die none
TWINmat<-matrix(0,nrow=n,ncol=6)
for(i in seq(n))
{
flag1=flag2=0
if(TWIN_W[i,2]<=ths)
flag1<-1
if(TWIN_W[i,3]<=ths)
flag2<-1
TWINmat[i,1]<- flag1 & flag2
TWINmat[i,2]<- xor(flag1 , flag2)
TWINmat[i,3]<- !flag1 & !flag2
TWINmat[i,4]<- TWIN_Y[i,2] & TWIN_Y[i,3]
TWINmat[i,5]<- xor(TWIN_Y[i,2] , TWIN_Y[i,3])
TWINmat[i,6]<- !TWIN_Y[i,2] & !TWIN_Y[i,3]
}
sum(TWINmat[,4])
sum(TWINmat[,1])
write(TWINmat,file="TWINmat.Rdata")
library(devtools)
devtools::document()
library(BiCausality)
resC<-BiCausality::CausalGraphInferMainFunc(mat = TWINmat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
resC$depRes
resC$depRes$E0
resC$depRes$E0pval
resC$depRes$E0lowbound
sum(TWINmat[,1])
sum(TWINmat[,2])
sum(TWINmat[,1] ==1 && TWINmat[,2] ==1 )
sum( (TWINmat[,1] + TWINmat[,2]) ==2 )
sum( (TWINmat[,1] + TWINmat[,2]) ==1 )
sum( (TWINmat[,1] + TWINmat[,2]) ==0 )
resC$depRes$E0mean
sum( (TWINmat[,1] + TWINmat[,2]) ==2 )
sum( (TWINmat[,1] + TWINmat[,3]) ==2 )
sum( (TWINmat[,1] + TWINmat[,4]) ==2 )
sum( (TWINmat[,1] + TWINmat[,5]) ==2 )
sum( (TWINmat[,1] + TWINmat[,6]) ==2 )
confNetFunc<-function(mat,IndpThs=0.1)
{
d<-dim(mat)[2]
confNet<-matrix(0,nrow=d,ncol=d)
D<-VecAlignment(mat)
confValMat<-matrix(0,nrow=d,ncol=d)
#===
for(i in seq(d-1))
for(j in seq(i+1,d))
{
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP # conf(y|z)
b1<-CondProb(D,y=z,z=y)$condP # conf(z|y)
confValMat[i,j]<-a1
confValMat[j,i]<-b1
if((a1-b1)>0 && a1>=IndpThs)
confNet[i,j]<-1
else if((b1-a1)>0 && b1>= IndpThs)
confNet[j,i]<-1
else
confNet[i,j]<-0
}
return(list(confNet=confNet,confValMat=confValMat) )
}
res<-confNetFunc(TWINmat)
res$confValMat
library(devtools)
devtools::document()
library(BiCausality)
resC<-BiCausality::CausalGraphInferMainFunc(mat = TWINmat,CausalThs=0.1,IndpThs=0.001)
TWIN_Y<-read.csv(file="twin_pairs_Y_3years_samesex.csv")
TWIN_W<-read.csv(file="twin_pairs_T_3years_samesex.csv")
n<-dim(TWIN_Y)[1]
ths<-1000
#1:w<=ths both, 2:w<=ths one, 3: w<=ths none, 4:die both, 5: die one, 6: die none
TWINmat<-matrix(0,nrow=n,ncol=2)
for(i in seq(n))
{
flag1=flag2=0
if(TWIN_W[i,2]<=ths)
flag1<-1
if(TWIN_W[i,3]<=ths)
flag2<-1
#TWINmat[i,1]<- flag1 & flag2
#TWINmat[i,2]<- xor(flag1 , flag2)
#TWINmat[i,3]<- !flag1 & !flag2
#TWINmat[i,4]<- TWIN_Y[i,2] & TWIN_Y[i,3]
#TWINmat[i,5]<- xor(TWIN_Y[i,2] , TWIN_Y[i,3])
#TWINmat[i,6]<- !TWIN_Y[i,2] & !TWIN_Y[i,3]
TWINmat[i,1]<- flag1 | flag2
TWINmat[i,2]<- TWIN_Y[i,2] & TWIN_Y[i,3]
}
library(devtools)
devtools::document()
library(BiCausality)
confNetFunc<-function(mat,IndpThs=0.1)
{
d<-dim(mat)[2]
confNet<-matrix(0,nrow=d,ncol=d)
D<-VecAlignment(mat)
confValMat<-matrix(0,nrow=d,ncol=d)
#===
for(i in seq(d-1))
for(j in seq(i+1,d))
{
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP # conf(y|z)
b1<-CondProb(D,y=z,z=y)$condP # conf(z|y)
confValMat[i,j]<-a1
confValMat[j,i]<-b1
if((a1-b1)>0 && a1>=IndpThs)
confNet[i,j]<-1
else if((b1-a1)>0 && b1>= IndpThs)
confNet[j,i]<-1
else
confNet[i,j]<-0
}
return(list(confNet=confNet,confValMat=confValMat) )
}
#resC<-BiCausality::CausalGraphInferMainFunc(mat = TWINmat,CausalThs=0.1,IndpThs=0.001)
#resC$CausalGRes$Ehat # proposed method
res<-confNetFunc(TWINmat)
res$confValMat
library(devtools)
devtools::document()
library(BiCausality)
confNetFunc<-function(mat,IndpThs=0.1)
{
d<-dim(mat)[2]
confNet<-matrix(0,nrow=d,ncol=d)
D<-VecAlignment(mat)
confValMat<-matrix(0,nrow=d,ncol=d)
#===
for(i in seq(d-1))
for(j in seq(i+1,d))
{
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP # conf(y|z)
b1<-CondProb(D,y=z,z=y)$condP # conf(z|y)
confValMat[i,j]<-a1
confValMat[j,i]<-b1
if((a1-b1)>0 && a1>=IndpThs)
confNet[i,j]<-1
else if((b1-a1)>0 && b1>= IndpThs)
confNet[j,i]<-1
else
confNet[i,j]<-0
}
return(list(confNet=confNet,confValMat=confValMat) )
}
resC<-BiCausality::CausalGraphInferMainFunc(mat = TWINmat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
res<-confNetFunc(TWINmat)
resC$depRes$E0mean
library(devtools)
devtools::document()
library(BiCausality)
confNetFunc<-function(mat,IndpThs=0.1)
{
d<-dim(mat)[2]
confNet<-matrix(0,nrow=d,ncol=d)
D<-VecAlignment(mat)
confValMat<-matrix(0,nrow=d,ncol=d)
#===
for(i in seq(d-1))
for(j in seq(i+1,d))
{
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP # conf(y|z)
b1<-CondProb(D,y=z,z=y)$condP # conf(z|y)
confValMat[i,j]<-a1
confValMat[j,i]<-b1
if((a1-b1)>0 && a1>=IndpThs)
confNet[i,j]<-1
else if((b1-a1)>0 && b1>= IndpThs)
confNet[j,i]<-1
else
confNet[i,j]<-0
}
return(list(confNet=confNet,confValMat=confValMat) )
}
resC<-BiCausality::CausalGraphInferMainFunc(mat = TWINmat,CausalThs=0.1,IndpThs=.01)
resC$CausalGRes$Ehat # proposed method
res<-confNetFunc(TWINmat)
resC$CausalGRes$causalInfo$`2,1`
write(TWINmat,res,resC,file="TWINres.Rdata")
write(TWINmat,res,resC,file="TWINres.Rdata")
write(TWINmat,res,resC,file="TWINres.Rdata")
save(TWINmat,res,resC,file="TWINres.Rdata")
load("~/GitHub/BiCausality/TWINres.Rdata")
resC$CausalGRes$causalInfo
?bSCMCausalGraphFunc
library(devtools)
devtools::document()
library(BiCausality)
confNetFunc<-function(mat,IndpThs=0.1)
{
d<-dim(mat)[2]
confNet<-matrix(0,nrow=d,ncol=d)
D<-VecAlignment(mat)
confValMat<-matrix(0,nrow=d,ncol=d)
#===
for(i in seq(d-1))
for(j in seq(i+1,d))
{
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP # conf(y|z)
b1<-CondProb(D,y=z,z=y)$condP # conf(z|y)
confValMat[i,j]<-a1
confValMat[j,i]<-b1
if((a1-b1)>0 && a1>=IndpThs)
confNet[i,j]<-1
else if((b1-a1)>0 && b1>= IndpThs)
confNet[j,i]<-1
else
confNet[i,j]<-0
}
return(list(confNet=confNet,confValMat=confValMat) )
}
resC<-BiCausality::CausalGraphInferMainFunc(mat = TWINmat,CausalThs=0.1,IndpThs=.01)
resC$CausalGRes$Ehat # proposed method
res<-confNetFunc(TWINmat)
save(TWINmat,res,resC,file="TWINres.Rdata")
resC$CausalGRes$Ehat
resC$CausalGRes$causalInfo
library(devtools)
devtools::document()
library(BiCausality)
confNetFunc<-function(mat,IndpThs=0.1)
{
d<-dim(mat)[2]
confNet<-matrix(0,nrow=d,ncol=d)
D<-VecAlignment(mat)
confValMat<-matrix(0,nrow=d,ncol=d)
#===
for(i in seq(d-1))
for(j in seq(i+1,d))
{
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP # conf(y|z)
b1<-CondProb(D,y=z,z=y)$condP # conf(z|y)
confValMat[i,j]<-a1
confValMat[j,i]<-b1
if((a1-b1)>0 && a1>=IndpThs)
confNet[i,j]<-1
else if((b1-a1)>0 && b1>= IndpThs)
confNet[j,i]<-1
else
confNet[i,j]<-0
}
return(list(confNet=confNet,confValMat=confValMat) )
}
resC<-BiCausality::CausalGraphInferMainFunc(mat = TWINmat,CausalThs=0.1,IndpThs=.01)
resC$CausalGRes$Ehat # proposed method
res<-confNetFunc(TWINmat)
resC$CausalGRes$EValHat
save(TWINmat,res,resC,file="TWINres.Rdata")
document()
library(devtools)
devtools::document()
load("TPMAPdata61.rdata")
mat40<-as.data.frame(DataTProv40$P)
for(i in seq(31))
{
mode(mat40[,i])= "numeric"
mat40[is.na(mat40[,i]), i] = 0
print(sprintf("%d",i )  )
print(unique(mat40[,i]))
}
mat40<-as.matrix(mat40)
library(BiCausality)
# alpha=0.05
# nboot=100
# IndpThs=0.05
# CausalThs = 0.25
# slack=0.001
# res50<-bSCMDepndentGraphFunc(mat = mat50, pflag=TRUE,IndpThs =0.01)
# print("Removing confounder(s)")
# res50_2<-BiCausality::bSCMdeConfoundingGraphFunc(res50,IndpThs=IndpThs,alpha=alpha)
# print("Inferring causal graph")
# res50_3<-BiCausality::bSCMCausalGraphFunc(res50_2$E1,res50$Dboot ,alpha=alpha,SignThs=IndpThs,CausalThs = CausalThs,slack=slack)
res40final<-BiCausality::CausalGraphInferMainFunc(mat = mat40)
load("TPMAPdata61.rdata")
mat50<-as.data.frame(DataTProv50$P)
for(i in seq(31))
{
mode(mat50[,i])= "numeric"
mat50[is.na(mat50[,i]), i] = 0
print(sprintf("%d",i )  )
print(unique(mat50[,i]))
}
mat50<-as.matrix(mat50)
library(BiCausality)
library(devtools)
devtools::document()
library(BiCausality)
# alpha=0.05
# nboot=100
# IndpThs=0.05
# CausalThs = 0.25
# slack=0.001
# res50<-bSCMDepndentGraphFunc(mat = mat50, pflag=TRUE,IndpThs =0.01)
# print("Removing confounder(s)")
# res50_2<-BiCausality::bSCMdeConfoundingGraphFunc(res50,IndpThs=IndpThs,alpha=alpha)
# print("Inferring causal graph")
# res50_3<-BiCausality::bSCMCausalGraphFunc(res50_2$E1,res50$Dboot ,alpha=alpha,SignThs=IndpThs,CausalThs = CausalThs,slack=slack)
res50final<-BiCausality::CausalGraphInferMainFunc(mat = mat50)
save(mat50,res50final,file="res50final_new.Rdata")
load("~/GitHub/BiCausality/res50final_new.Rdata")
res50final$CausalGRes$EValHat
res50final$CausalGRes$causalInfo
