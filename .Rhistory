{
newMat[[sprintf("%d",vec2bin(mat[i,]))]]$name<-mat[i,]
if(is.null(newMat[[sprintf("%d",vec2bin(mat[i,]))]]$count)==TRUE )
newMat[[sprintf("%d",vec2bin(mat[i,]))]]$count<-1
else
newMat[[sprintf("%d",vec2bin(mat[i,]))]]$count<-newMat[[sprintf("%d",vec2bin(mat[i,]))]]$count+1
}
return(newMat)
}
n<-5000
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- mat[,2] | mat[,5]
D<-VecAlignment(mat)
#TODO add given z
indpFunc<-function(D,i,j,z=c())
{
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
indMagitude<-0
z1<-numeric(d)-1
for(i1 in c(0,1) )
for(j1 in c(0,1))
{
y1<-numeric(d) -1
y1[c(i,j)] <- c(i1,j1)
y2<-numeric(d) -1
y2[c(i)] <- i1
y3<-numeric(d) -1
y3[c(j)] <- j1
res2<-CondProb(D,y1,z1)
n2<-res2$count
condPair<-res2$condP
condi<-CondProb(D,y2,z1)$condP
condj<-CondProb(D,y3,z1)$condP
indMagitude<-indMagitude+ (abs(condPair - condi*condj)*(n2/n) )
}
return(indMagitude)
}
z<-numeric(d)-1
z[2] = -1
indpFunc(D,2,5,z=z)
#TODO add given z
indpFunc<-function(D,i,j,z=c())
{
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
indMagitude<-0
z1<-numeric(d)-1
for(i1 in c(0,1) )
for(j1 in c(0,1))
{
y1<-numeric(d) -1
y1[c(i,j)] <- c(i1,j1)
y2<-numeric(d) -1
y2[c(i)] <- i1
y3<-numeric(d) -1
y3[c(j)] <- j1
res2<-CondProb(D,y1,z1)
n2<-res2$count
condPair<-res2$condP
condi<-CondProb(D,y2,z1)$condP
condj<-CondProb(D,y3,z1)$condP
indMagitude<-indMagitude+ (abs(condPair - condi*condj)*(n2/n) )
}
return(indMagitude)
}
z<-numeric(d)-1
z[2] = -1
indpFunc(D,4,5,z=z)
#TODO add given z
indpFunc<-function(D,i,j,z=c())
{
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
indMagitude<-0
z1<-numeric(d)-1
for(i1 in c(0,1) )
for(j1 in c(0,1))
{
y1<-numeric(d) -1
y1[c(i,j)] <- c(i1,j1)
y2<-numeric(d) -1
y2[c(i)] <- i1
y3<-numeric(d) -1
y3[c(j)] <- j1
res2<-CondProb(D,y1,z1)
n2<-res2$count
condPair<-res2$condP
condi<-CondProb(D,y2,z1)$condP
condj<-CondProb(D,y3,z1)$condP
indMagitude<-indMagitude+ (abs(condPair - condi*condj)*(n2/n) )
}
return(indMagitude)
}
z<-numeric(d)-1
z[2] = -1
indpFunc(D,2,3,z=z)
#TODO add given z
indpFunc<-function(D,i,j,z=c())
{
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
indMagitude<-0
z1<-numeric(d)-1
for(i1 in c(0,1) )
for(j1 in c(0,1))
{
y1<-numeric(d) -1
y1[c(i,j)] <- c(i1,j1)
y2<-numeric(d) -1
y2[c(i)] <- i1
y3<-numeric(d) -1
y3[c(j)] <- j1
res2<-CondProb(D,y1,z1)
n2<-res2$count
condPair<-res2$condP
condi<-CondProb(D,y2,z1)$condP
condj<-CondProb(D,y3,z1)$condP
indMagitude<-indMagitude+ (abs(condPair - condi*condj)*(n2/n) )
}
return(indMagitude)
}
z<-numeric(d)-1
z[2] = -1
indpFunc(D,1,3,z=z)
#TODO add given z
indpFunc<-function(D,i,j,z=c())
{
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
indMagitude<-0
z1<-numeric(d)-1
for(i1 in c(0,1) )
for(j1 in c(0,1))
{
y1<-numeric(d) -1
y1[c(i,j)] <- c(i1,j1)
y2<-numeric(d) -1
y2[c(i)] <- i1
y3<-numeric(d) -1
y3[c(j)] <- j1
res2<-CondProb(D,y1,z1)
n2<-res2$count
condPair<-res2$condP
condi<-CondProb(D,y2,z1)$condP
condj<-CondProb(D,y3,z1)$condP
indMagitude<-indMagitude+ (abs(condPair - condi*condj)*(n2/n) )
}
return(indMagitude)
}
z<-numeric(d)-1
z[2] = -1
indpFunc(D,1,4,z=z)
#TODO add given z
indpFunc<-function(D,i,j,z=c())
{
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
indMagitude<-0
z1<-numeric(d)-1
for(i1 in c(0,1) )
for(j1 in c(0,1))
{
y1<-numeric(d) -1
y1[c(i,j)] <- c(i1,j1)
y2<-numeric(d) -1
y2[c(i)] <- i1
y3<-numeric(d) -1
y3[c(j)] <- j1
res2<-CondProb(D,y1,z1)
n2<-res2$count
condPair<-res2$condP
condi<-CondProb(D,y2,z1)$condP
condj<-CondProb(D,y3,z1)$condP
indMagitude<-indMagitude+ (abs(condPair - condi*condj)*(n2/n) )
}
return(indMagitude)
}
z<-numeric(d)-1
z[2] = 1
indpFunc(D,1,4,z=z)
#TODO add given z
indpFunc<-function(D,i,j,z=c())
{
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
indMagitude<-0
z1<-numeric(d)-1
for(i1 in c(0,1) )
for(j1 in c(0,1))
{
y1<-numeric(d) -1
y1[c(i,j)] <- c(i1,j1)
y2<-numeric(d) -1
y2[c(i)] <- i1
y3<-numeric(d) -1
y3[c(j)] <- j1
res2<-CondProb(D,y1,z1)
n2<-res2$count
condPair<-res2$condP
condi<-CondProb(D,y2,z1)$condP
condj<-CondProb(D,y3,z1)$condP
indMagitude<-indMagitude+ (abs(condPair - condi*condj)*(n2/n) )
}
return(indMagitude)
}
z<-numeric(d)-1
z[2] = -1
indpFunc(D,2,3,z=z)
#TODO add given z
indpFunc<-function(D,i,j,z=c())
{
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
indMagitude<-0
z1<-numeric(d)-1
for(i1 in c(0,1) )
for(j1 in c(0,1))
{
y1<-numeric(d) -1
y1[c(i,j)] <- c(i1,j1)
y2<-numeric(d) -1
y2[c(i)] <- i1
y3<-numeric(d) -1
y3[c(j)] <- j1
res2<-CondProb(D,y1,z1)
n2<-res2$count
condPair<-res2$condP
condi<-CondProb(D,y2,z1)$condP
condj<-CondProb(D,y3,z1)$condP
indMagitude<-indMagitude+ (abs(condPair - condi*condj)*(n2/n) )
}
return(indMagitude)
}
z<-numeric(d)-1
z[c(4,5)] = 1
indpFunc(D,2,3,z=z)
#TODO add given z
indpFunc<-function(D,i,j,z=c())
{
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
indMagitude<-0
z1<-numeric(d)-1
for(i1 in c(0,1) )
for(j1 in c(0,1))
{
y1<-numeric(d) -1
y1[c(i,j)] <- c(i1,j1)
y2<-numeric(d) -1
y2[c(i)] <- i1
y3<-numeric(d) -1
y3[c(j)] <- j1
res2<-CondProb(D,y1,z1)
n2<-res2$count
condPair<-res2$condP
condi<-CondProb(D,y2,z1)$condP
condj<-CondProb(D,y3,z1)$condP
indMagitude<-indMagitude+ (abs(condPair - condi*condj)*(n2/n) )
}
return(indMagitude)
}
z<-numeric(d)-1
z[c(4,5)] = 1
indpFunc(D,1,3,z=z)
A<-1:10
A[c(1,1,5,5)]
sample(A,length(A),replace = TRUE)
sample(A,length(A),replace = TRUE)
sample(A,length(A),replace = TRUE)
sample(A,length(A),replace = TRUE)
sample(A,length(A),replace = TRUE)
mat
dim(mat)[1]
sample(1:10,length(1:10),replace = TRUE)
D
D[[c(1,2)]]
D[[c(1)]]
D[[1:2]]
D[1:2]
D[1]
D[1:2]
D[2]
D[c(1,2)]
D[c(1,2,5000)]
D[c(5000)]
mat[c(1),]
mat[c(1,2),]
mat[c(1,2,5000),]
indpFunc(D,1,2,z=z)
i=1
j=2
z<-numeric(d)-1
nboot=1000
n<-dim(mat)[1]
bDx<-matrix(0,nboot,n)
bIndpDist<-numeric(nboot)
for(k in seq(nboot))
{
bDx[k,]<-sample(1:n,length(1:n),replace = TRUE)
nMat<-mat[bDx[k,],]
D<-VecAlignment(nMat)
bIndpDist[k]<-indpFunc(D,i,j,z=z)
}
i=1
j=2
z<-numeric(d)-1
nboot=1000
n<-dim(mat)[1]
bDx<-matrix(0,nboot,n)
bIndpDist<-numeric(nboot)
for(k in seq(nboot))
{
bDx[k,]<-sample(1:n,length(1:n),replace = TRUE)
nMat<-mat[bDx[k,],]
D<-VecAlignment(nMat)
bIndpDist[k]<-indpFunc(D,i,j,z=z)
k
}
i=1
j=2
z<-numeric(d)-1
nboot=10
n<-dim(mat)[1]
bDx<-matrix(0,nboot,n)
bIndpDist<-numeric(nboot)
for(k in seq(nboot))
{
bDx[k,]<-sample(1:n,length(1:n),replace = TRUE)
nMat<-mat[bDx[k,],]
D<-VecAlignment(nMat)
bIndpDist[k]<-indpFunc(D,i,j,z=z)
k
}
i=1
j=2
z<-numeric(d)-1
nboot=10
n<-dim(mat)[1]
bDx<-matrix(0,nboot,n)
bIndpDist<-numeric(nboot)
for(k in seq(nboot))
{
bDx[k,]<-sample(1:n,length(1:n),replace = TRUE)
nMat<-mat[bDx[k,],]
D<-VecAlignment(nMat)
bIndpDist[k]<-indpFunc(D,i,j,z=z)
print(k)
}
bIndpDist
vec2bin<-function(x)
{
newx<-0
d<-length(x)
for(i in seq(d))
{
newx <- newx+x[i]*2^(d-i)
}
return(newx)
}
VecAlignment<-function(mat)
{
# mat must have the dimension n by d where n and d must be greater than 1.
newMat<-list()
d<-dim(mat)[1]
for(i in seq(d))
{
newMat[[sprintf("%d",vec2bin(mat[i,]))]]$name<-mat[i,]
if(is.null(newMat[[sprintf("%d",vec2bin(mat[i,]))]]$count)==TRUE )
newMat[[sprintf("%d",vec2bin(mat[i,]))]]$count<-1
else
newMat[[sprintf("%d",vec2bin(mat[i,]))]]$count<-newMat[[sprintf("%d",vec2bin(mat[i,]))]]$count+1
}
return(newMat)
}
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- mat[,2] | mat[,5]
D<-VecAlignment(mat)
z<-numeric(d)-1
y<-numeric(d)-1
z[c(1,2)]<-1
y[2]<--1
CondProb<-function(D,y,z)
{
p<-0
filter<-z != -1
if(sum(filter) == 0)
nD<-D
else
{
nD<-list()
for(i in seq(length(D)) )
{
flag<-sum(D[[i]]$name[filter] == z[filter])
if(flag == sum(filter))
{
nD[[names(D)[i] ]] <- D[[i]]
}
}
}
filterY<- y!= -1
count<-0
countTotal<-0
for(i in seq(length(nD)) )
{
flag<-sum(nD[[i]]$name[filterY] == y[filterY])
countTotal<-countTotal+nD[[i]]$count
if(flag == sum(filterY))
{
count<-count+nD[[i]]$count
}
}
return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
}
A<-CondProb(D,y,z)
#TODO add given z
indpFunc<-function(D,i,j,z=c())
{
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
indMagitude<-0
z1<-numeric(d)-1
for(i1 in c(0,1) )
for(j1 in c(0,1))
{
y1<-numeric(d) -1
y1[c(i,j)] <- c(i1,j1)
y2<-numeric(d) -1
y2[c(i)] <- i1
y3<-numeric(d) -1
y3[c(j)] <- j1
res2<-CondProb(D,y1,z1)
n2<-res2$count
condPair<-res2$condP
condi<-CondProb(D,y2,z1)$condP
condj<-CondProb(D,y3,z1)$condP
indMagitude<-indMagitude+ (abs(condPair - condi*condj)*(n2/n) )
}
return(indMagitude)
}
z<-numeric(d)-1
z[c(4,5)] = 1
indpFunc(D,1,3,z=z)
i=1
j=2
z<-numeric(d)-1
nboot=100
n<-dim(mat)[1]
bDx<-matrix(0,nboot,n)
bIndpDist<-numeric(nboot)
for(k in seq(nboot))
{
bDx[k,]<-sample(1:n,length(1:n),replace = TRUE)
nMat<-mat[bDx[k,],]
D<-VecAlignment(nMat)
bIndpDist[k]<-indpFunc(D,i,j,z=z)
print(k)
}
bIndpDist
