mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
i=2
j=1
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=2
j=4
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=2
j=3
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=4
j=1
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=4
j=1
z<-numeric(d)-1
z[2]<-1
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j,z=z)
i=2
j=3
z<-numeric(d)-1
z[1]<-0
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j,z=z)
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
#mat[,3]<- mat[,3] | mat[,6]
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
#mat[,7] <- !mat[,8] cannot have exact pairs to compute whether i -> j
mat[,9]<- mat[,8] | !mat[,7]
lastRes<-CausalGraphInferMainFunc(mat)
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
#mat[,3]<- mat[,3] | mat[,6]
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
#mat[,7] <- !mat[,8] cannot have exact pairs to compute whether i -> j
mat[,9]<- mat[,8] | !mat[,7]
lastRes<-CausalGraphInferMainFunc(mat)
lastRes$CausalGRes
lastRes$CausalGRes$Ehat
#z[c(1,2)]<-1
#y[c(1,2)]<-c(1,0)
# CondProb<-function(D,y,z)
# {
#   p<-0
#   filter<-z != -1
#   if(sum(filter) == 0)
#     nD<-D
#   else
#   {
#     nD<-list()
#     for(i in seq(length(D)) )
#     {
#       flag<-sum(D[[i]]$name[filter] == z[filter])
#       if(flag == sum(filter))
#       {
#         nD[[names(D)[i] ]] <- D[[i]]
#       }
#     }
#   }
#   filterY<- y!= -1
#   count<-0
#   countTotal<-0
#   for(i in seq(length(nD)) )
#   {
#     flag<-sum(nD[[i]]$name[filterY] == y[filterY])
#     countTotal<-countTotal+nD[[i]]$count
#     if(flag == sum(filterY))
#     {
#       count<-count+nD[[i]]$count
#     }
#   }
#
#   return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
# }
z<-numeric(d)-1
y<-numeric(d)-1
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP
b1<-CondProb(D,y=z,z=y)$condP
a1-b1
A<-bIndpTest(mat,i,j)
causalDirTest(mat,i=i,j=j,vi=1,ths=0.25)
bin2dec<-function(x)
{
newx<-0
d<-length(x)
for(i in seq(d))
{
newx <- newx+x[i]*2^(d-i)
}
return(newx)
}
VecAlignment<-function(mat)
{
# mat must have the dimension n by d where n and d must be greater than 1.
newMat<-list()
d<-dim(mat)[1]
for(i in seq(d))
{
newMat[[sprintf("%d",bin2dec(mat[i,]))]]$name<-mat[i,]
if(is.null(newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count)==TRUE )
newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count<-1
else
newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count<-newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count+1
}
return(newMat)
}
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- mat[,2] | mat[,5]
D<-VecAlignment(mat)
#z[c(1,2)]<-1
#y[c(1,2)]<-c(1,0)
# CondProb<-function(D,y,z)
# {
#   p<-0
#   filter<-z != -1
#   if(sum(filter) == 0)
#     nD<-D
#   else
#   {
#     nD<-list()
#     for(i in seq(length(D)) )
#     {
#       flag<-sum(D[[i]]$name[filter] == z[filter])
#       if(flag == sum(filter))
#       {
#         nD[[names(D)[i] ]] <- D[[i]]
#       }
#     }
#   }
#   filterY<- y!= -1
#   count<-0
#   countTotal<-0
#   for(i in seq(length(nD)) )
#   {
#     flag<-sum(nD[[i]]$name[filterY] == y[filterY])
#     countTotal<-countTotal+nD[[i]]$count
#     if(flag == sum(filterY))
#     {
#       count<-count+nD[[i]]$count
#     }
#   }
#
#   return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
# }
z<-numeric(d)-1
y<-numeric(d)-1
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP
z[c(1,2)]<-1
y[c(1,2)]<-c(1,0)
CondProb<-function(D,y,z)
{
p<-0
filter<-z != -1
if(sum(filter) == 0)
nD<-D
else
{
nD<-list()
for(i in seq(length(D)) )
{
flag<-sum(D[[i]]$name[filter] == z[filter])
if(flag == sum(filter))
{
nD[[names(D)[i] ]] <- D[[i]]
}
}
}
filterY<- y!= -1
count<-0
countTotal<-0
for(i in seq(length(nD)) )
{
flag<-sum(nD[[i]]$name[filterY] == y[filterY])
countTotal<-countTotal+nD[[i]]$count
if(flag == sum(filterY))
{
count<-count+nD[[i]]$count
}
}
return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
}
z<-numeric(d)-1
y<-numeric(d)-1
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP
b1<-CondProb(D,y=z,z=y)$condP
a1-b1
A<-bIndpTest(mat,i,j)
CondProb(D,y=y,z=z)$condP
à¸œ
z
y
y[c(1,2)]<-c(1,0)
y
z[c(1,2)]<-1
y[c(1,2)]<-c(1,0)
CondProb<-function(D,y,z)
{
p<-0
filter<-z != -1
if(sum(filter) == 0)
nD<-D
else
{
nD<-list()
for(i in seq(length(D)) )
{
flag<-sum(D[[i]]$name[filter] == z[filter])
if(flag == sum(filter))
{
nD[[names(D)[i] ]] <- D[[i]]
}
}
}
filterY<- y!= -1
count<-0
countTotal<-0
for(i in seq(length(nD)) )
{
flag<-sum(nD[[i]]$name[filterY] == y[filterY])
countTotal<-countTotal+nD[[i]]$count
if(flag == sum(filterY))
{
count<-count+nD[[i]]$count
}
}
return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
}
z<-numeric(d)-1
y<-numeric(d)-1
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP
b1<-CondProb(D,y=z,z=y)$condP
a1-b1
#A<-bIndpTest(mat,i,j)
#causalDirTest(mat,i=i,j=j,vi=1,ths=0.25)
CondProb<-function(D,y,z)
{
p<-0
filter<-z != -1
if(sum(filter) == 0)
nD<-D
else
{
nD<-list()
for(i in seq(length(D)) )
{
flag<-sum(D[[i]]$name[filter] == z[filter])
if(flag == sum(filter))
{
nD[[names(D)[i] ]] <- D[[i]]
}
}
}
filterY<- y!= -1
count<-0
countTotal<-0
for(i in seq(length(nD)) )
{
flag<-sum(nD[[i]]$name[filterY] == y[filterY])
countTotal<-countTotal+nD[[i]]$count
if(flag == sum(filterY))
{
count<-count+nD[[i]]$count
}
}
return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
}
z<-numeric(d)-1
y<-numeric(d)-1
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP
b1<-CondProb(D,y=z,z=y)$condP
a1-b1
#A<-bIndpTest(mat,i,j)
#causalDirTest(mat,i=i,j=j,vi=1,ths=0.25)
b1
a1
CondProb<-function(D,y,z)
{
p<-0
filter<-z != -1
if(sum(filter) == 0)
nD<-D
else
{
nD<-list()
for(i in seq(length(D)) )
{
flag<-sum(D[[i]]$name[filter] == z[filter])
if(flag == sum(filter))
{
nD[[names(D)[i] ]] <- D[[i]]
}
}
}
filterY<- y!= -1
count<-0
countTotal<-0
for(i in seq(length(nD)) )
{
flag<-sum(nD[[i]]$name[filterY] == y[filterY])
countTotal<-countTotal+nD[[i]]$count
if(flag == sum(filterY))
{
count<-count+nD[[i]]$count
}
}
return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
}
z<-numeric(d)-1
bin2dec<-function(x)
{
newx<-0
d<-length(x)
for(i in seq(d))
{
newx <- newx+x[i]*2^(d-i)
}
return(newx)
}
VecAlignment<-function(mat)
{
# mat must have the dimension n by d where n and d must be greater than 1.
newMat<-list()
d<-dim(mat)[1]
for(i in seq(d))
{
newMat[[sprintf("%d",bin2dec(mat[i,]))]]$name<-mat[i,]
if(is.null(newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count)==TRUE )
newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count<-1
else
newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count<-newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count+1
}
return(newMat)
}
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- mat[,2] | mat[,5]
D<-VecAlignment(mat)
CondProb<-function(D,y,z)
{
p<-0
filter<-z != -1
if(sum(filter) == 0)
nD<-D
else
{
nD<-list()
for(i in seq(length(D)) )
{
flag<-sum(D[[i]]$name[filter] == z[filter])
if(flag == sum(filter))
{
nD[[names(D)[i] ]] <- D[[i]]
}
}
}
filterY<- y!= -1
count<-0
countTotal<-0
for(i in seq(length(nD)) )
{
flag<-sum(nD[[i]]$name[filterY] == y[filterY])
countTotal<-countTotal+nD[[i]]$count
if(flag == sum(filterY))
{
count<-count+nD[[i]]$count
}
}
return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
}
z<-numeric(d)-1
y<-numeric(d)-1
# mat[,1]<-mat[,2] | mat[,3]
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP # 2|1 y|z
b1<-CondProb(D,y=z,z=y)$condP # 1|2
a1-b1
#A<-bIndpTest(mat,i,j)
#causalDirTest(mat,i=i,j=j,vi=1,ths=0.25)
D$668$name
D[[1]]$name
names(D[1])
a1
b1
z=c()
is.null(z)
library(devtools)
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
#mat[,3]<- mat[,3] | mat[,6]
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
#mat[,7] <- !mat[,8] cannot have exact pairs to compute whether i -> j
mat[,9]<- mat[,8] | !mat[,7]
lastRes<-CausalGraphInferMainFunc(mat)
library(devtools)
devtools::document()
load("TPMAPdata61.rdata")
mat40<-as.data.frame(DataTProv40$P)
for(i in seq(31))
{
mode(mat40[,i])= "numeric"
mat40[is.na(mat40[,i]), i] = 0
print(sprintf("%d",i )  )
print(unique(mat40[,i]))
}
mat40<-as.matrix(mat40)
library(BiCausality)
res<-bSCMDepndentGraphFunc(mat = mat40, pflag=TRUE)
res40<-res
wrtie(res40,"res40.rdata")
save(res40,"res40.rdata")
save(res40,file = "res40.rdata")
res40$E0
View(res40$E0)
sum(res40$E0)
res$depInfo
res$depInfo$`24,25`
res$Dboot
res$Dboot[[1]]
save(res40,mat40,file = "res40.rdata")
mat50<-as.data.frame(DataTProv50$P)
for(i in seq(31))
{
mode(mat50[,i])= "numeric"
mat50[is.na(mat50[,i]), i] = 0
print(sprintf("%d",i )  )
print(unique(mat50[,i]))
}
mat50<-as.matrix(mat50)
library(BiCausality)
res50<-bSCMDepndentGraphFunc(mat = mat50, pflag=TRUE)
sum()
sum(res50$E0)
res50$E0
save(res50,mat50,file = "res50.rdata")
