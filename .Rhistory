return(list("clsLayer"=clsLayer))
}
as.numeric.factor <- function(x) {as.numeric(levels(x))[x]}
# Load data
#Y<-as.numeric(pvData$col_22_1_6)  # average income col_22_1_6
X<-cbind(pvData$indicator1,pvData$indicator2,pvData$indicator3,pvData$indicator4,pvData$indicator5,pvData$indicator6,pvData$indicator7,pvData$indicator8,pvData$indicator9,pvData$indicator10)
X<-cbind(X,pvData$indicator11,pvData$indicator12,pvData$indicator13,pvData$indicator14,pvData$indicator15,pvData$indicator16,pvData$indicator17,pvData$indicator18,pvData$indicator19,pvData$indicator20)
X<-cbind(X,pvData$indicator21,pvData$indicator22,pvData$indicator23,pvData$indicator24,pvData$indicator25,pvData$indicator26,pvData$indicator27,pvData$indicator28,pvData$indicator29,pvData$indicator30,pvData$indicator31)
X[X==0]=NA
X[X==-1]=0
X[X==1]=1
clsLayer<- getClsLayerFromTumbolID(pvData$tumbol_ID,pvData$village_ID)$clsLayer
DataTProv50<-list()
#filterOutvec<-!is.na(Y)
DataTProv50$X<-X#[filterOutvec,]
#DataTProv40$Y<-as.matrix(Y[filterOutvec])
DataTProv50$clsLayer<-clsLayer#[filterOutvec,]
load("~/GitHub/BiCausality/TPMAPdata61.rdata")
save(DataTProv50,DataTProv40,file = "TPMAPdata61.rdata")
load("~/GitHub/BiCausality/TPMAPdata61.rdata")
View(DataTProv40$X)
DataTProv50$P<-DataTProv50$X
DataTProv50$P[DataTProv50$P==1]=2
DataTProv50$P[is.na(DataTProv50$P)]=2
DataTProv50$P[DataTProv50$P==0]=1
View(DataTProv50$P)
View(DataTProv50$X)
DataTProv50$P<-DataTProv50$X
DataTProv50$P[DataTProv50$P==1]=2
DataTProv50$P[is.na(DataTProv50$P)]=2
DataTProv50$P[DataTProv50$P==0]=1
DataTProv50$P[DataTProv50$P==2]=0
View(DataTProv50$P)
DataTProv50$P<-DataTProv50$X
DataTProv50$P[DataTProv50$P==1]=2
DataTProv50$P[is.na(DataTProv50$P)]=2
DataTProv50$P[DataTProv50$P==0]=1
DataTProv50$P[DataTProv50$P==2]=0
DataTProv40$P<-DataTProv40$X
DataTProv40$P[DataTProv40$P==1]=2
DataTProv40$P[is.na(DataTProv40$P)]=2
DataTProv40$P[DataTProv40$P==0]=1
DataTProv40$P[DataTProv40$P==2]=0
View(DataTProv40)
View(DataTProv40$P)
save(DataTProv40,DataTProv50,"TPMAPdata61.rdata")
save(DataTProv40,DataTProv50,file = "TPMAPdata61.rdata")
load("~/GitHub/BiCausality/TPMAPdata61.rdata")
library(BiCausality)
library("devtools")
library(BiCausality)
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
i=2
j=1
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=2
j=4
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=2
j=3
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=4
j=1
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=4
j=1
z<-numeric(d)-1
z[2]<-1
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j,z=z)
i=2
j=3
z<-numeric(d)-1
z[1]<-0
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j,z=z)
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
#mat[,3]<- mat[,3] | mat[,6]
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
#mat[,7] <- !mat[,8] cannot have exact pairs to compute whether i -> j
mat[,9]<- mat[,8] | !mat[,7]
lastRes<-CausalGraphInferMainFunc(mat)
ก
d
CondProb(D= mat , y=c(1), z= c(2))
CondProb(D= mat , y=c(1) )
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
#mat[,3]<- mat[,3] | mat[,6]
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
#mat[,7] <- !mat[,8] cannot have exact pairs to compute whether i -> j
mat[,9]<- mat[,8] | !mat[,7]
lastRes<-CausalGraphInferMainFunc(mat)
D<- VecAlignment(mat)
dim(D)
length(D)
D
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
#mat[,3]<- mat[,3] | mat[,6]
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
#mat[,7] <- !mat[,8] cannot have exact pairs to compute whether i -> j
mat[,9]<- mat[,8] | !mat[,7]
lastRes<-CausalGraphInferMainFunc(mat)
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
#mat[,3]<- mat[,3] | mat[,6]
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
#mat[,7] <- !mat[,8] cannot have exact pairs to compute whether i -> j
mat[,9]<- mat[,8] | !mat[,7]
lastRes<-CausalGraphInferMainFunc(mat)
is.null(z)
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
i=2
j=1
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
i=2
j=1
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=2
j=4
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=2
j=3
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=4
j=1
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j)
i=4
j=1
z<-numeric(d)-1
z[2]<-1
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j,z=z)
i=2
j=3
z<-numeric(d)-1
z[1]<-0
print(sprintf("i%d,j%d",i,j))
bIndpTest(mat,i,j,z=z)
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
#mat[,3]<- mat[,3] | mat[,6]
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
#mat[,7] <- !mat[,8] cannot have exact pairs to compute whether i -> j
mat[,9]<- mat[,8] | !mat[,7]
lastRes<-CausalGraphInferMainFunc(mat)
document()
library(BiCausality)
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
#mat[,3]<- mat[,3] | mat[,6]
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- !mat[,2] | mat[,5]
#mat[,7] <- !mat[,8] cannot have exact pairs to compute whether i -> j
mat[,9]<- mat[,8] | !mat[,7]
lastRes<-CausalGraphInferMainFunc(mat)
lastRes$CausalGRes
lastRes$CausalGRes$Ehat
#z[c(1,2)]<-1
#y[c(1,2)]<-c(1,0)
# CondProb<-function(D,y,z)
# {
#   p<-0
#   filter<-z != -1
#   if(sum(filter) == 0)
#     nD<-D
#   else
#   {
#     nD<-list()
#     for(i in seq(length(D)) )
#     {
#       flag<-sum(D[[i]]$name[filter] == z[filter])
#       if(flag == sum(filter))
#       {
#         nD[[names(D)[i] ]] <- D[[i]]
#       }
#     }
#   }
#   filterY<- y!= -1
#   count<-0
#   countTotal<-0
#   for(i in seq(length(nD)) )
#   {
#     flag<-sum(nD[[i]]$name[filterY] == y[filterY])
#     countTotal<-countTotal+nD[[i]]$count
#     if(flag == sum(filterY))
#     {
#       count<-count+nD[[i]]$count
#     }
#   }
#
#   return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
# }
z<-numeric(d)-1
y<-numeric(d)-1
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP
b1<-CondProb(D,y=z,z=y)$condP
a1-b1
A<-bIndpTest(mat,i,j)
causalDirTest(mat,i=i,j=j,vi=1,ths=0.25)
bin2dec<-function(x)
{
newx<-0
d<-length(x)
for(i in seq(d))
{
newx <- newx+x[i]*2^(d-i)
}
return(newx)
}
VecAlignment<-function(mat)
{
# mat must have the dimension n by d where n and d must be greater than 1.
newMat<-list()
d<-dim(mat)[1]
for(i in seq(d))
{
newMat[[sprintf("%d",bin2dec(mat[i,]))]]$name<-mat[i,]
if(is.null(newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count)==TRUE )
newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count<-1
else
newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count<-newMat[[sprintf("%d",bin2dec(mat[i,]))]]$count+1
}
return(newMat)
}
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <- mat[,2] | mat[,5]
D<-VecAlignment(mat)
#z[c(1,2)]<-1
#y[c(1,2)]<-c(1,0)
# CondProb<-function(D,y,z)
# {
#   p<-0
#   filter<-z != -1
#   if(sum(filter) == 0)
#     nD<-D
#   else
#   {
#     nD<-list()
#     for(i in seq(length(D)) )
#     {
#       flag<-sum(D[[i]]$name[filter] == z[filter])
#       if(flag == sum(filter))
#       {
#         nD[[names(D)[i] ]] <- D[[i]]
#       }
#     }
#   }
#   filterY<- y!= -1
#   count<-0
#   countTotal<-0
#   for(i in seq(length(nD)) )
#   {
#     flag<-sum(nD[[i]]$name[filterY] == y[filterY])
#     countTotal<-countTotal+nD[[i]]$count
#     if(flag == sum(filterY))
#     {
#       count<-count+nD[[i]]$count
#     }
#   }
#
#   return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
# }
z<-numeric(d)-1
y<-numeric(d)-1
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP
z[c(1,2)]<-1
y[c(1,2)]<-c(1,0)
CondProb<-function(D,y,z)
{
p<-0
filter<-z != -1
if(sum(filter) == 0)
nD<-D
else
{
nD<-list()
for(i in seq(length(D)) )
{
flag<-sum(D[[i]]$name[filter] == z[filter])
if(flag == sum(filter))
{
nD[[names(D)[i] ]] <- D[[i]]
}
}
}
filterY<- y!= -1
count<-0
countTotal<-0
for(i in seq(length(nD)) )
{
flag<-sum(nD[[i]]$name[filterY] == y[filterY])
countTotal<-countTotal+nD[[i]]$count
if(flag == sum(filterY))
{
count<-count+nD[[i]]$count
}
}
return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
}
z<-numeric(d)-1
y<-numeric(d)-1
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP
b1<-CondProb(D,y=z,z=y)$condP
a1-b1
A<-bIndpTest(mat,i,j)
CondProb(D,y=y,z=z)$condP
ผ
z
y
y[c(1,2)]<-c(1,0)
y
z[c(1,2)]<-1
y[c(1,2)]<-c(1,0)
CondProb<-function(D,y,z)
{
p<-0
filter<-z != -1
if(sum(filter) == 0)
nD<-D
else
{
nD<-list()
for(i in seq(length(D)) )
{
flag<-sum(D[[i]]$name[filter] == z[filter])
if(flag == sum(filter))
{
nD[[names(D)[i] ]] <- D[[i]]
}
}
}
filterY<- y!= -1
count<-0
countTotal<-0
for(i in seq(length(nD)) )
{
flag<-sum(nD[[i]]$name[filterY] == y[filterY])
countTotal<-countTotal+nD[[i]]$count
if(flag == sum(filterY))
{
count<-count+nD[[i]]$count
}
}
return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
}
z<-numeric(d)-1
y<-numeric(d)-1
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP
b1<-CondProb(D,y=z,z=y)$condP
a1-b1
#A<-bIndpTest(mat,i,j)
#causalDirTest(mat,i=i,j=j,vi=1,ths=0.25)
CondProb<-function(D,y,z)
{
p<-0
filter<-z != -1
if(sum(filter) == 0)
nD<-D
else
{
nD<-list()
for(i in seq(length(D)) )
{
flag<-sum(D[[i]]$name[filter] == z[filter])
if(flag == sum(filter))
{
nD[[names(D)[i] ]] <- D[[i]]
}
}
}
filterY<- y!= -1
count<-0
countTotal<-0
for(i in seq(length(nD)) )
{
flag<-sum(nD[[i]]$name[filterY] == y[filterY])
countTotal<-countTotal+nD[[i]]$count
if(flag == sum(filterY))
{
count<-count+nD[[i]]$count
}
}
return(list("condP"=count/countTotal, nD=nD,countTotal=countTotal,count=count ))
}
z<-numeric(d)-1
y<-numeric(d)-1
i=1
j=2
D<-VecAlignment(mat)
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP
b1<-CondProb(D,y=z,z=y)$condP
a1-b1
#A<-bIndpTest(mat,i,j)
#causalDirTest(mat,i=i,j=j,vi=1,ths=0.25)
b1
a1
