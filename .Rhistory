trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-confNetFunc(mat=mat,ths=0.9)
#res$confNet
#res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
cMat<- resC$CausalGRes$Ehat
print("proposed method trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
print("proposed method directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-75
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-100
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
library(bnlearn)
library(devtools)
document()
library(bnlearn)
library(devtools)
#document()
library(BiCausality)
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-75
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
mat2<-mat
for(i in seq(d))
mat2[,i]<-as.numeric(mat[,i])
res<-pc.stable(x=data.frame(mat2))
bayeNet<-amat(res)
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(bayeNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = bayeNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
library(BiCausality)
library(bnlearn)
# set.seed(2022)
seedN<-2022
probTHS<-0.1
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
mat2<-mat
for(i in seq(d))
mat2[,i]<-as.numeric(mat[,i])
res<-pc.stable(x=data.frame(mat2))
bayeNet<-amat(res)
res<-confNetFunc(mat=mat,ths =0.9)
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
res2<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res2$confNet
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
net4 <- graph_from_adjacency_matrix(bayeNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
A<-res2$confNet
View(A)
B<-bayeNet
View(A)
View(B)
View(A)
rownames(bayeNet)
rownames(bayeNet)<-NULL
bayeNet
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
rownames(bayeNet)<-NULL
net4 <- graph_from_adjacency_matrix(bayeNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
rownames(bayeNet)<-NULL
colnames(bayeNet)<-NULL
net4 <- graph_from_adjacency_matrix(bayeNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
rownames(bayeNet)<-NULL
colnames(bayeNet)<-NULL
net4 <- graph_from_adjacency_matrix(bayeNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#F2C79D',layout=layout_with_kk)
plot(net ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net ,vertex.size =20 , edge.arrow.size = 0.3, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net4, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#F2C79D',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.3, vertex.size =20 , vertex.color = '#F2C79D',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.3, vertex.size =20 , vertex.color = '#F2C79D')
plot(net4, edge.arrow.size = 0.1, vertex.size =20 , vertex.color = '#F2C79D')
?pc.stable
citation("R")
citation("r")
citation("cran")
citation()
library(BiCausality)
data(simData)
library(devtools)
document()
library(BiCausality)
simData
VecAlignment(mat=simData$mat)
D[['758']]
D<-VecAlignment(mat=simData$mat)
D[['758']]
simData$mat[,i]
simData$mat[,1]
simData$mat[1,]
dex(mat[i,])
bin2dec(mat[1,])
bin2dec(simData$mat[100,])
document()
?VecAlignment
document()
bin2dec(c(1,1,0,1))
bin2dec(c(1,0,1,0))
bin2dec(c(1,1,1,0))
document()
document()
?bin2dec
bin2dec(X=c(1,1,1,0))
bin2dec(c(1,1,1,0))
bin2dec(c(1,1,1,0))
document()
?bin2dec
bin2dec(x=c(1,1,1,0))
bin2dec(x=c(1,1,1,0))
bin2dec(x=c(1,1,1,0))
library(devtools)
document()
document()
library(BiCausality)
simData::D
oddRatioFunc(simData$D,i=1,j=2)
document()
?oddDiffFunc
oddDiffFunc(simData$D,i=1,j=2)
document()
oddDiffFunc(simData$D,i=1,j=2)
document()
oddDiffFunc(simData$D,i=1,j=2)
indpFunc(simData$D,i=1,j=2)
indpFunc(simData$D,i=1,j=2)
document()
?indpFunc
indpFunc(simData$D,i=1,j=2)
document()
simData$ma
res<-simData$mat
document()
document()
document()
?simData
document()
?simData
document()
?simData
document()
?simData
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n)) {     set.seed(seedN+i)    mat[i,] <- rbinom(n=d, size=1, prob=0.5) }
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n)) {     set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5) }
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
document()
?simData
document()
?simData
document()
?simData
document()
?simData
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n)) { set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5) }
mat[,1]<-mat[,2] | mat[,3] # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
mat2<-simData$mat
sum(mat2 == mat)
mat2 == mat
document()
?simData
?rbinom
document()
?simData
document()
confNetFunc(SimData$mat)
confNetFunc(simData$mat)
document()
confNetFunc(simData$mat)
document()
document()
?CausalGraphInferMainFunc
document()
resC<-BiCausality::CausalGraphInferMainFunc(mat = simData$mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
library(devtools)
doc
document()
resC<-BiCausality::CausalGraphInferMainFunc(mat = simData$mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
document()
resC<-BiCausality::CausalGraphInferMainFunc(mat = simData$mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
View(resC)
document()
?CausalGraphInferMainFunc
resC$depRes$E0
resC$depRes$E0mean
resC$depRes$depInfo[['1,2']]
resC$depRes$depInfo[['1,2']]$indices
?wilcox.test
document()
?CausalGraphInferMainFunc
resC$ConfoundRes
resC$CausalGRes$EValHat
resC$CausalGRes$causalInfo$[['2,1']]
resC$CausalGRes$causalInfo[[`2,1`]]
resC$CausalGRes$causalInfo`2,1`
resC$CausalGRes$causalInfo$`2,1`
resC$CausalGRes$causalInfo[[1]]
resC$CausalGRes$causalInfo$`2,1`$CDirConfValInv
resC$CausalGRes$causalInfo[`2,1`]$CDirConfValInv
resC$CausalGRes$causalInfo[[`2,1`]]$CDirConfValInv
resC$depRes$depInfo[['2,1']]
resC$depRes$depInfo
resC$depRes$depInfo[['1,2']]
resC$CausalGRes$causalInfo[[`1,2`]]$CDirConfValInv
resC$CausalGRes$causalInfo[['1,2']]$CDirConfValInv
resC$CausalGRes$causalInfo[['2,1']]$CDirConfValInv
resC$CausalGRes$causalInfo[['2,1']]
CausalGRes$causalInfo[['2,1']]
CausalGRes$causalInfo[['2,1']]
resC$CausalGRes$causalInfo[['2,1']]
document
document()
?CausalGraphInferMainFunc
document()
document()
resC<-BiCausality::CausalGraphInferMainFunc(mat = simData$mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
bSCMDepndentGraphFunc(simData$mat)
bSCMDepndentGraphFunc(simData$mat, nboot=20)
bSCMDepndentGraphFunc(simData$mat, nboot=50)
document()
document()
bSCMDepndentGraphFastFunc(simData$mat)
document()
BiCausality::resC
simData
load("~/GitHub/BiCausality/data/exampleData.RData")
load("~/GitHub/BiCausality/data/prepd-ortho.rda")
simData$resC<-BiCausality::CausalGraphInferMainFunc(mat = simData$mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
save(file= 'simData.RData', simData)
load("~/GitHub/BiCausality/simData.RData")
document()
bSCMdeConfoundingGraphFunc(simData$resC$depRes)
simData$resC$depRes$E0
document()
?simData
?simData
document()
document()
document()
document()
?simData
document()
?BiCausality::simData
document()
?BiCausality::simData
?BiCausality::simData
document()
?BiCausality::simData
document()
?BiCausality::simData
document()
?BiCausality::simData
document()
?BiCausality::simData
library()
library(devtools)
doc
document()
?bSCMDepndentGraphFunc
?bSCMCausalGraphFunc
?CausalGraphInferMainFunc
document()
?simData
check()
document()
citation("BiCausality")
check
library(devtools)
document()
check()
check()
library(BiCausality)
devtools::use_mit_license()
document()
document()
?\'i,j\'
?CausalGraphInferMainFunc
;
()
?CausalGraphInferMainFunc
library(devtools)
?CausalGraphInferMainFunc
document()
?CausalGraphInferMainFunc
check()
remove.packages("BiCausality")
check()
check()
check()
check()
check()
load("~/GitHub/BiCausality/data/simData.RData")
?usethis::use_data
check()
usethis::use_data(BiCausality::simData$D)
BiCausality::simData$D
check()
document()
check()
check()
check()
check()
check()
check()
sample
?sample
?-wilcox.test
?quantile
check()
check()
document()
check()
check()
document()
check()
check()
document()
check()
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
