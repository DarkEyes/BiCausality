# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
library(bnlearn)
library(devtools)
document()
library(bnlearn)
library(devtools)
document()
library(BiCausality)
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-100
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
mat2<-mat
for(i in seq(d))
mat2[,i]<-as.numeric(mat[,i])
res<-pc.stable(x=data.frame(mat2))
bayeNet<-amat(res)
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(bayeNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = bayeNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
library(bnlearn)
library(devtools)
document()
library(BiCausality)
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-300
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
mat2<-mat
for(i in seq(d))
mat2[,i]<-as.numeric(mat[,i])
res<-pc.stable(x=data.frame(mat2))
bayeNet<-amat(res)
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(bayeNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = bayeNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
# set.seed(2022)
seedN<-2022
n<-50
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.3)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-confNetFunc(mat=mat,ths=0.9)
#res$confNet
#res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
cMat<- resC$CausalGRes$Ehat
print("proposed method trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
print("proposed method directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-50
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
library(bnlearn)
library(devtools)
document()
library(BiCausality)
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-50
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
mat2<-mat
for(i in seq(d))
mat2[,i]<-as.numeric(mat[,i])
res<-pc.stable(x=data.frame(mat2))
bayeNet<-amat(res)
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(bayeNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = bayeNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-150
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
library(bnlearn)
library(devtools)
document()
library(BiCausality)
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-150
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
mat2<-mat
for(i in seq(d))
mat2[,i]<-as.numeric(mat[,i])
res<-pc.stable(x=data.frame(mat2))
bayeNet<-amat(res)
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(bayeNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = bayeNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
# set.seed(2022)
seedN<-2022
n<-75
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.3)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-confNetFunc(mat=mat,ths=0.9)
#res$confNet
#res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
cMat<- resC$CausalGRes$Ehat
print("proposed method trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
print("proposed method directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-75
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-100
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
library(bnlearn)
library(devtools)
document()
library(bnlearn)
library(devtools)
#document()
library(BiCausality)
# set.seed(2022)
seedN<-2022
probTHS<-0.3
n<-75
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
mat2<-mat
for(i in seq(d))
mat2[,i]<-as.numeric(mat[,i])
res<-pc.stable(x=data.frame(mat2))
bayeNet<-amat(res)
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(bayeNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = bayeNet ) )
# resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
# resC$CausalGRes$Ehat # proposed method
#
# cMat<- resC$CausalGRes$Ehat
# print("proposed method trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(cMat) ) )
# print("proposed method directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = cMat) )
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
library(BiCausality)
library(bnlearn)
# set.seed(2022)
seedN<-2022
probTHS<-0.1
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
mat2<-mat
for(i in seq(d))
mat2[,i]<-as.numeric(mat[,i])
res<-pc.stable(x=data.frame(mat2))
bayeNet<-amat(res)
res<-confNetFunc(mat=mat,ths =0.9)
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
res2<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res2$confNet
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
net4 <- graph_from_adjacency_matrix(bayeNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
A<-res2$confNet
View(A)
B<-bayeNet
View(A)
View(B)
View(A)
rownames(bayeNet)
rownames(bayeNet)<-NULL
bayeNet
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
rownames(bayeNet)<-NULL
net4 <- graph_from_adjacency_matrix(bayeNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
rownames(bayeNet)<-NULL
colnames(bayeNet)<-NULL
net4 <- graph_from_adjacency_matrix(bayeNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
rownames(bayeNet)<-NULL
colnames(bayeNet)<-NULL
net4 <- graph_from_adjacency_matrix(bayeNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#F2C79D',layout=layout_with_kk)
plot(net ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net ,vertex.size =20 , edge.arrow.size = 0.3, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net4, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#F2C79D',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.3, vertex.size =20 , vertex.color = '#F2C79D',layout=layout_with_kk)
plot(net4, edge.arrow.size = 0.3, vertex.size =20 , vertex.color = '#F2C79D')
plot(net4, edge.arrow.size = 0.1, vertex.size =20 , vertex.color = '#F2C79D')
?pc.stable
citation("R")
citation("r")
citation("cran")
citation()
