net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#C4D8E9',layout=layout_with_kk(net2,dim =2))
library(igraph)
par(mfrow=c(1,2))
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.2, layout=layout_with_kk)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#C4D8E9',layout=layout_with_kk(net2,dim =1))
library(igraph)
par(mfrow=c(1,2))
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.2, layout=layout_with_kk)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#C4D8E9',layout=layout_with_kk(net2,  epsilon = 2))
library(igraph)
par(mfrow=c(1,2))
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.2, layout=layout_with_kk)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#C4D8E9',layout=layout_with_kk(net2,  epsilon = 1))
library(igraph)
par(mfrow=c(1,2))
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.2, layout=layout_with_kk)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#C4D8E9',layout=layout_with_kk(net2,  epsilon = 0.5))
library(igraph)
par(mfrow=c(1,2))
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.2, layout=layout_with_kk)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#C4D8E9',layout=layout_with_kk(net2,  epsilon = 10))
library(igraph)
par(mfrow=c(1,2))
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.2, layout=layout_with_kk)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#C4D8E9')
library(igraph)
#par(mfrow=c(1,2))
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.2, layout=layout_with_kk)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#C4D8E9')
library(igraph)
#par(mfrow=c(1,2))
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.2, layout=layout_with_kk)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#C4D8E9',layout=layout_with_kk)
library(devtools)
devtools::document()
load("TPMAPdata61.rdata")
library(igraph)
#par(mfrow=c(1,2))
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#C4D8E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#C4D8E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#C4D8E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#A4D8E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4D8E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D498E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4A8E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#94C8E9')
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
library(BiCausality)
library(devtools)
devtools::document()
library(BiCausality)
# set.seed(2022)
seedN<-2022
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-confNetFunc(mat=mat,ths =0.9)
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
res<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
library(BiCausality)
oddRatioCausalRuleFunc<-function(D,i,j,z=c(),slack=0.001)
{
d<-length(D[[1]]$name)
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
oddMagitude<-0
z1<-numeric(d)-1
y<-numeric(d)-1
y[c(i,j)]<-c(0,0)
a1<-CondProb(D,y,z1)$count
y[c(i,j)]<-c(1,1)
b1<-CondProb(D,y,z1)$count
y[c(i,j)]<-c(1,0)
c1<-CondProb(D,y,z1)$count
y[c(i,j)]<-c(0,1)
d1<-CondProb(D,y,z1)$count
return(   (a1+b1+slack)/(c1+d1+slack) )
}
causalRuleFunc<-function(mat,oddThs=0.1,slack=0.001)
{
d<-dim(mat)[2]
confNet<-matrix(0,nrow=d,ncol=d)
D<-VecAlignment(mat)
confValMat<-matrix(0,nrow=d,ncol=d)
oddValMat<-matrix(0,nrow=d,ncol=d)
#===
for(i in seq(d-1))
for(j in seq(i+1,d))
{
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(1)
z[i]<-c(1)
oddVal<-oddRatioCausalRuleFunc(D,i,j)
a1<-CondProb(D,y=y,z=z)$condP # conf(y|z)
b1<-CondProb(D,y=z,z=y)$condP # conf(z|y)
confValMat[i,j]<-a1
confValMat[j,i]<-b1
oddValMat[i,j]<-oddVal
oddValMat[j,i]<-oddVal
if((a1-b1)>0  && oddVal> oddThs)
confNet[i,j]<-1
else if((b1-a1)>0 && oddVal > oddThs)
confNet[j,i]<-1
else
confNet[i,j]<-0
}
return(list(confNet=confNet,confValMat=confValMat, oddValMat=oddValMat) )
}
res<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res$confNet
library(BiCausality)
# set.seed(2022)
seedN<-2022
probTHS<-0.5
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-confNetFunc(mat=mat,ths =0.9)
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
res2<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res2$confNet
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.width=res2$confNet*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.width=res2$confNet*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#adf0da',layout=layout_with_kk)
library(BiCausality)
# set.seed(2022)
seedN<-2022
probTHS<-0.1
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-confNetFunc(mat=mat,ths =0.9)
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
res2<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res2$confNet
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.width=res2$confNet*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#adf0da',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.width=res2$confNet*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#7bbaa5',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.width=res2$confNet*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
library(devtools)
devtools::document()
library(BiCausality)
# set.seed(2022)
seedN<-2022
probTHS<-0.1
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-confNetFunc(mat=mat,ths =0.9)
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
res2<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
library(BiCausality)
oddRatioCausalRuleFunc<-function(D,i,j,z=c(),slack=0.001)
{
d<-length(D[[1]]$name)
if(is.null(z))
z<-numeric(d)-1
res<-CondProb(D,y=numeric(d)-1,z=z)
D<-res$nD
n<-res$countTotal
L<-length(D)
oddMagitude<-0
z1<-numeric(d)-1
y<-numeric(d)-1
y[c(i,j)]<-c(0,0)
a1<-CondProb(D,y,z1)$count
y[c(i,j)]<-c(1,1)
b1<-CondProb(D,y,z1)$count
y[c(i,j)]<-c(1,0)
c1<-CondProb(D,y,z1)$count
y[c(i,j)]<-c(0,1)
d1<-CondProb(D,y,z1)$count
return(   (a1+b1+slack)/(c1+d1+slack) )
}
causalRuleFunc<-function(mat,oddThs=0.1,slack=0.001)
{
d<-dim(mat)[2]
confNet<-matrix(0,nrow=d,ncol=d)
D<-VecAlignment(mat)
confValMat<-matrix(0,nrow=d,ncol=d)
oddValMat<-matrix(0,nrow=d,ncol=d)
#===
for(i in seq(d-1))
for(j in seq(i+1,d))
{
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(1)
z[i]<-c(1)
oddVal<-oddRatioCausalRuleFunc(D,i,j)
a1<-CondProb(D,y=y,z=z)$condP # conf(y|z)
b1<-CondProb(D,y=z,z=y)$condP # conf(z|y)
confValMat[i,j]<-a1
confValMat[j,i]<-b1
oddValMat[i,j]<-oddVal
oddValMat[j,i]<-oddVal
if((a1-b1)>0  && oddVal> oddThs)
confNet[i,j]<-1
else if((b1-a1)>0 && oddVal > oddThs)
confNet[j,i]<-1
else
confNet[i,j]<-0
}
return(list(confNet=confNet,confValMat=confValMat, oddValMat=oddValMat) )
}
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
library(BiCausality)
# set.seed(2022)
seedN<-2022
probTHS<-0.1
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=probTHS)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-confNetFunc(mat=mat,ths =0.9)
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC$CausalGRes$Ehat # proposed method
res2<-causalRuleFunc(mat=mat,oddThs=1/2.5^log(probTHS))
res2$confNet
library(igraph)
net <- graph_from_adjacency_matrix(res$confNet ,weighted = NULL)
net2 <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat, weighted = NULL)
net3 <- graph_from_adjacency_matrix(res2$confNet, weighted = NULL)
#par(mfrow=c(1,2))
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net3, edge.width=res2$confNet*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#33c4b1',layout=layout_with_kk)
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =100 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =40 , edge.arrow.size = 1, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =40 , edge.arrow.size = 0.5, layout=layout_with_kk, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =40 , edge.arrow.size = 0.5, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =40 , edge.arrow.size = 0.5, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =10 , edge.arrow.size = 0.5, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =20 , edge.arrow.size = 0.5, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =25 , edge.arrow.size = 0.5, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =25 , edge.arrow.size = 0.2, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =40 , edge.arrow.size = 0.5, vertex.color = '#ffc2dc')
plot(net, edge.width=res$confNet*3 ,vertex.size =30 , edge.arrow.size = 0.3, vertex.color = '#ffc2dc')
plot(net, vertex.color = '#ffc2dc')
plot(net ,vertex.size =30 , edge.arrow.size = 0.3, vertex.color = '#ffc2dc')
plot(net ,vertex.size =30 , edge.arrow.size = 0.1, vertex.color = '#ffc2dc')
plot(net ,vertex.size =30 , edge.arrow.size = 0.2, vertex.color = '#ffc2dc')
plot(net ,vertex.size =25 , edge.arrow.size = 0.1.5, vertex.color = '#ffc2dc')
plot(net ,vertex.size =25 , edge.arrow.size = 1.5, vertex.color = '#ffc2dc')
plot(net ,vertex.size =25 , edge.arrow.size = 0.15, vertex.color = '#ffc2dc')
plot(net2 ,vertex.size =25 , edge.arrow.size = 0.15, vertex.color = '#D4C8E9')
plot(net3 ,vertex.size =25 , edge.arrow.size = 0.15, vertex.color = '#33c4b1')
load("~/GitHub/BiCausality/res40final_new.Rdata")
TWIN_Y<-read.csv(file="../data/twin_pairs_Y_3years_samesex.csv")
TWIN_W<-read.csv(file="../data/twin_pairs_T_3years_samesex.csv")
n<-dim(TWIN_Y)[1]
ths<-1000
#1:w<=ths both, 2:w<=ths one, 3: w<=ths none, 4:die both, 5: die one, 6: die none
TWINmat<-matrix(0,nrow=n,ncol=2)
for(i in seq(n))
{
flag1=flag2=0
if(TWIN_W[i,2]<=ths)
flag1<-1
if(TWIN_W[i,3]<=ths)
flag2<-1
#TWINmat[i,1]<- flag1 & flag2
#TWINmat[i,2]<- xor(flag1 , flag2)
#TWINmat[i,3]<- !flag1 & !flag2
#TWINmat[i,4]<- TWIN_Y[i,2] & TWIN_Y[i,3]
#TWINmat[i,5]<- xor(TWIN_Y[i,2] , TWIN_Y[i,3])
#TWINmat[i,6]<- !TWIN_Y[i,2] & !TWIN_Y[i,3]
TWINmat[i,1]<- flag1 | flag2
TWINmat[i,2]<- TWIN_Y[i,2] & TWIN_Y[i,3]
}
save(TWINmat,res,resC,file="../data/TWINres.Rdata")
library(devtools)
devtools::document()
library(BiCausality)
confNetFunc<-function(mat,IndpThs=0.1)
{
d<-dim(mat)[2]
confNet<-matrix(0,nrow=d,ncol=d)
D<-VecAlignment(mat)
confValMat<-matrix(0,nrow=d,ncol=d)
#===
for(i in seq(d-1))
for(j in seq(i+1,d))
{
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(1)
z[i]<-c(1)
a1<-CondProb(D,y=y,z=z)$condP # conf(y|z)
b1<-CondProb(D,y=z,z=y)$condP # conf(z|y)
confValMat[i,j]<-a1
confValMat[j,i]<-b1
if((a1-b1)>0 && a1>=IndpThs)
confNet[i,j]<-1
else if((b1-a1)>0 && b1>= IndpThs)
confNet[j,i]<-1
else
confNet[i,j]<-0
}
return(list(confNet=confNet,confValMat=confValMat) )
}
resC<-BiCausality::CausalGraphInferMainFunc(mat = TWINmat,CausalThs=0.1,IndpThs=.01)
resC$CausalGRes$Ehat # proposed method
res<-confNetFunc(TWINmat)
