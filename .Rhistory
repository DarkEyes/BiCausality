}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
res<-confNetFunc(mat=mat,IndpThs=0.9)
res$confNet
res$confValMat # baseline
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(res$confNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = res$confNet ) )
seedN<-2022
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1)
?CausalGraphInferMainFunc
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =50)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =30)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =50)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =50)
resC$CausalGRes$EValHat
resC$CausalGRes$
Ehat
resC$CausalGRes$EValHat[2,1]
resC$CausalGRes$causalInfo
resC$CausalGRes$causalInfo[['2,1']]
?wilcox.test
library(igraph)
library(igraph)
net <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat ,weighted = NULL)
plot(net2, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
library(igraph)
net <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat ,weighted = NULL)
plot(net, edge.width=resC$CausalGRes$Ehat*3, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net, vertex.color = '#D4C8E9')
plot(net, vertex.color = '#D4C8E9')
plot(net, edge.arrow.size = 0.5, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
plot(net, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
# Run the function
library(BiCausality)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
resC$CausalGRes$Ehat
library(igraph)
net <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat ,weighted = NULL)
plot(net, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
resC$CausalGRes$causalInfo[['2,1']]
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
# Run the function
library(BiCausality)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
resC$CausalGRes$Ehat
library(igraph)
net <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat ,weighted = NULL)
plot(net, edge.arrow.size = 0.2, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
resC$CausalGRes$causalInfo[['2,1']]
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
# Run the function
library(BiCausality)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
resC$CausalGRes$Ehat
library(igraph)
net <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat ,weighted = NULL)
plot(net, edge.arrow.size = 0.3, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
resC$CausalGRes$causalInfo[['2,1']]
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
# Run the function
library(BiCausality)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
resC$CausalGRes$Ehat
library(igraph)
net <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat ,weighted = NULL)
plot(net, edge.arrow.size = 0.3, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
resC$CausalGRes$causalInfo[['2,1']]
load("~/GitHub/BiCausality/data/res40final_new.Rdata")
View(mat40)
remotes::install_github("DarkEyes/BiCausality")
remotes::install_github("DarkEyes/BiCausality")
library("BiCausality")
devtools::document()
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
# Run the function
library(BiCausality)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
resC$CausalGRes$Ehat
library(igraph)
net <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat ,weighted = NULL)
plot(net, edge.arrow.size = 0.3, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
resC$CausalGRes$causalInfo[['2,1']]
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
# Run the function
library(BiCausality)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
resC$CausalGRes$Ehat
library(igraph)
net <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat ,weighted = NULL)
plot(net, edge.arrow.size = 0.3, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
resC$CausalGRes$causalInfo[['2,1']]
psych
remotes::install_github("DarkEyes/BiCausality")
remotes::install_github("DarkEyes/BiCausality")
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
# Run the function
library(BiCausality)
resC<-BiCausality::CausalGraphInferMainFunc(mat = mat,CausalThs=0.1, nboot =50, IndpThs=0.05)
resC$CausalGRes$Ehat
library(igraph)
net <- graph_from_adjacency_matrix(resC$CausalGRes$Ehat ,weighted = NULL)
plot(net, edge.arrow.size = 0.3, vertex.size =20 , vertex.color = '#D4C8E9',layout=layout_with_kk)
resC$CausalGRes$causalInfo[['2,1']]
supp<-function(X,values)
{
count<-0
n<-0
flag=0
if(is.null(dim(X)[1]))
{
n<-length(X)
flag=1
}
else
n<-dim(X)[1]
for(i in seq(n))
{
if(flag==1)
row<-X[i]
else
row<-X[i,]
if(sum(row==values) == length(values))
count=count+1
}
return(count/n)
}
x <- rbinom(n=10, size=1, prob=0.2)
ny<-rbinom(n=10, size=1, prob=0.05)
y <- x |  ny
supp(X=cbind(x,y),values=c(1,1) )
supp<-function(X,values)
{
count<-0
n<-0
flag=0
if(is.null(dim(X)[1]))
{
n<-length(X)
flag=1
}
else
n<-dim(X)[1]
for(i in seq(n))
{
if(flag==1)
row<-X[i]
else
row<-X[i,]
if(sum(row==values) == length(values))
count=count+1
}
return(count/n)
}
x <- rbinom(n=100, size=1, prob=0.2)
ny<-rbinom(n=100, size=1, prob=0.05)
y <- x |  ny
supp(X=cbind(x,y),values=c(1,1) )
X=cbind(x,y)
supp<-function(X,values)
{
count<-0
n<-0
flag=0
if(is.null(dim(X)[1]))
{
n<-length(X)
flag=1
}
else
n<-dim(X)[1]
for(i in seq(n))
{
if(flag==1)
row<-X[i]
else
row<-X[i,]
if(sum(row==values) == length(values))
count=count+1
}
return(count/n)
}
x <- rbinom(n=100, size=1, prob=0.5)
ny<-rbinom(n=100, size=1, prob=0.5)
y <- x |  ny
supp(X=cbind(x,y),values=c(1,1) )
supp<-function(X,values)
{
count<-0
n<-0
flag=0
if(is.null(dim(X)[1]))
{
n<-length(X)
flag=1
}
else
n<-dim(X)[1]
for(i in seq(n))
{
if(flag==1)
row<-X[i]
else
row<-X[i,]
if(sum(row==values) == length(values))
count=count+1
}
return(count/n)
}
x <- rbinom(n=100, size=1, prob=0.5)
ny<-rbinom(n=100, size=1, prob=0.25)
y <- x |  ny
supp(X=cbind(x,y),values=c(1,1) )
?rbinom
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?supp
devtools::document()
?supp
x <- rbinom(n=100, size=1, prob=0.5)
ny<-rbinom(n=100, size=1, prob=0.25)
y <- x |  ny
supp(X=cbind(x,y),values=c(1,1) )
x <- rbinom(n=100, size=1, prob=0.5)
ny<-rbinom(n=100, size=1, prob=0.25)
y <- x |  ny
supp(X=cbind(x,y),values=c(1,1) )
x <- rbinom(n=100, size=1, prob=0.5)
ny<-rbinom(n=100, size=1, prob=0.25)
y <- x |  ny
supp(X=cbind(x,y),values=c(1,1) )
x <- rbinom(n=100, size=1, prob=0.5)
ny<-rbinom(n=100, size=1, prob=0.25)
y <- x |  ny
supp(X=cbind(x,y),values=c(1,1) )
x <- rbinom(n=100, size=1, prob=0.5)
ny<-rbinom(n=100, size=1, prob=0.25)
y <- x |  ny
supp(X=cbind(x,y),values=c(1,1) )
seedN<-2022
n<-200 # 200 individuals
d<-10 # 10 variables
mat<-matrix(nrow=n,ncol=d) # the input of framework
#Simulate binary data from binomial distribution where the probability of value being 1 is 0.5.
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.5)
}
mat[,1]<-mat[,2] | mat[,3]  # 1 causes by 2 and 3
mat[,4] <-mat[,2] | mat[,5] # 4 causses by 2 and 5
mat[,6] <- mat[,1] | mat[,4] # 6 causes by 1 and 4
D<-VecAlignment(mat)
library(BiCausality)
D<-VecAlignment(mat)
simData$D<-D
simData<-list()
simData$D<-D
simData$mat<-mat
write(simData,file="exampleData.RData")
save(simData,file="exampleData.RData")
library(devtools)
document()
document()
document()
document()
?CondProb
y[1]<-c(1)
z[c(2,3)]<-c(1,1)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
document()
?CondProb
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[1]<-c(1)
z[c(2,3)]<-c(1,1)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[1]<-c(1)
z[c(2,3)]<-c(1,0)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[1]<-c(1)
z[c(2,3)]<-c(0,0)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[2]<-c(1)
z[c(1,3)]<-c(1,1)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[4]<-c(1)
z[c(2,3)]<-c(1,1)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[4]<-c(1)
z[c(2,3)]<-c(1,0)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[4]<-c(1)
z[c(2,3)]<-c(1,0)
CondProb(simData$D,y=y,z=z) # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[4]<-c(1)
z[c(4,3)]<-c(1,0)
CondProb(simData$D,y=y,z=z) # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[4]<-c(1)
z[c(4,3)]<-c(1,0)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[1]<-c(1)
z[c(4,3)]<-c(1,0)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[8]<-c(1)
z[c(4,3)]<-c(1,0)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[8]<-c(1)
z[c(7,9)]<-c(1,0)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[8]<-c(1)
z[c(7,9)]<-c(1,0)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[3]<-c(1)
z[c(7,9)]<-c(1,1)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[3]<-c(1)
z[c(7,9)]<-c(1,1)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[3]<-c(1)
z[c(7,9)]<-c(1,1)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[3]<-c(1)
z[c(7,9)]<-c(1,1)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[3]<-c(1)
z[c(7,9)]<-c(1,1)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
d=10 # dimensions of example vectors
z<-numeric(d)-1
y<-numeric(d)-1
y[3]<-c(1)
z[c(7,9)]<-c(1,1)
CondProb(simData$D,y=y,z=z)$condP # conf(inx1 is 1 |inx 2,3 are 1 ) y|z
