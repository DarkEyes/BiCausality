document()
document()
document()
document()
?simData
document()
?BiCausality::simData
document()
?BiCausality::simData
?BiCausality::simData
document()
?BiCausality::simData
document()
?BiCausality::simData
document()
?BiCausality::simData
document()
?BiCausality::simData
library()
library(devtools)
doc
document()
?bSCMDepndentGraphFunc
?bSCMCausalGraphFunc
?CausalGraphInferMainFunc
document()
?simData
check()
document()
citation("BiCausality")
check
library(devtools)
document()
check()
check()
library(BiCausality)
devtools::use_mit_license()
document()
document()
?\'i,j\'
?CausalGraphInferMainFunc
;
()
?CausalGraphInferMainFunc
library(devtools)
?CausalGraphInferMainFunc
document()
?CausalGraphInferMainFunc
check()
remove.packages("BiCausality")
check()
check()
check()
check()
check()
load("~/GitHub/BiCausality/data/simData.RData")
?usethis::use_data
check()
usethis::use_data(BiCausality::simData$D)
BiCausality::simData$D
check()
document()
check()
check()
check()
check()
check()
check()
sample
?sample
?-wilcox.test
?quantile
check()
check()
document()
check()
check()
document()
check()
check()
document()
check()
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(devtools)
check()
true
TRUE
check()
check()
mat
simData::mat
dim(simData$mat)[2]
document()
check()
document()
check()
document()
check()
check()
check()
check()
check()
load("~/GitHub/BiCausality/data/simData.RData")
mat<-simData$mat
save(file="mat.RData",mat)
check()
check()
document()
D<-simData$D
save(file="D.RData",D)
resC<-simData$resC
save(file="resC.RData",resC)
document()
check()
document()
document()
mat
dim(mat)[1]
dim(mat)[2]
document()
document()
check()
check()
check()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
document()
check()
check()
?CausalGraphInferMainFunc
document()
?CausalGraphInferMainFunc
check()
document()
check()
devtools::build_vignettes()
?devtools::build_vignettes()
document()
check()
check()
check()
?check
check(cran = TRUE)
load("~/GitHub/BiCausality/exp/res50final_new.Rdata")
adjustmentProb<-function(EValHat,mat,yflag=1,xflag=1)
{
#Work only positive asociation P(Y=yflag|X=xflag,Z)
n<-dim(Emat)[1]
D<-VecAlignment(mat)
A1<-numeric(n) # A[i] = Prob(Xi == 1)
adjEValHat<-matrix(0,nrow = n, ncol=n)
for(i in seq(n))
{
y1<-numeric(d) -1
y1[c(i)] <- 1 #supp(i)
A1[i]<-CondProb(D,y1,z=numeric(d)-1)$condP
}
for(i in seq(n))
for(j in seq(n))
{
if(EValHat[i,j]>0) # P(Xj|Xi)>0
# if xi has no parent
if(sum(EValHat[,i])==0)
{
adjEValHat[i,j]<-EValHat[i,j]
}
else # if xi has any parent(s), it needs adjustment
{
for(k in seq(n))
if(EValHat[k,i]>0)
{
print(sprintf("P(X%d =%d|X%d = %d,z%d)",j,yflag,i,xflag,k))
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(yflag)
z[c(i,k)]<-c(xflag,1)
a1<-CondProb(D,y=y,z=z)$condP # P(Xj=1|Xi=1,Xk=1)
z[c(i,k)]<-c(xflag,0)
a2<-CondProb(D,y=y,z=z)$condP # P(Xj=1|Xi=1,Xk=0)
adjEValHat[i,j]<-adjEValHat[i,j]+ a1*A1[k] + a2*(1-A1[k] )
}
}
}
return(adjEValHat)
}
seedN<-2022
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.25)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
library(BiCausality)
library(bnlearn)
#resC<-BiCausality::CausalGraphInferMainFunc(mat)
#adjustmentProb(resC$CausalGRes$EValHat,mat,xflag = 1)
mat2<-mat
for(i in seq(d))
mat2[,i]<-as.numeric(mat[,i])
res<-pc.stable(x=data.frame(mat2))
bayeNet<-amat(res)
trueMat<-matrix(nrow=d,ncol=d,0)
trueMat[c(2,3),1]<-1
trueMat[c(2,5),4]<-1
trueMat[c(1,4),6]<-1
trsTrueMat<-getTransitiveClosureMat(trueMat)
print("baseline trs mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(bayeNet) ) )
print("baseline directed mat")
print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = bayeNet ) )
adjustmentProb<-function(EValHat,mat,yflag=1,xflag=1)
{
#Work only positive asociation P(Y=yflag|X=xflag,Z)
n<-dim(Emat)[1]
D<-VecAlignment(mat)
A1<-numeric(n) # A[i] = Prob(Xi == 1)
adjEValHat<-matrix(0,nrow = n, ncol=n)
for(i in seq(n))
{
y1<-numeric(d) -1
y1[c(i)] <- 1 #supp(i)
A1[i]<-CondProb(D,y1,z=numeric(d)-1)$condP
}
for(i in seq(n))
for(j in seq(n))
{
if(EValHat[i,j]>0) # P(Xj|Xi)>0
# if xi has no parent
if(sum(EValHat[,i])==0)
{
adjEValHat[i,j]<-EValHat[i,j]
}
else # if xi has any parent(s), it needs adjustment
{
for(k in seq(n))
if(EValHat[k,i]>0)
{
print(sprintf("P(X%d =%d|X%d = %d,z%d)",j,yflag,i,xflag,k))
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(yflag)
z[c(i,k)]<-c(xflag,1)
a1<-CondProb(D,y=y,z=z)$condP # P(Xj=1|Xi=1,Xk=1)
z[c(i,k)]<-c(xflag,0)
a2<-CondProb(D,y=y,z=z)$condP # P(Xj=1|Xi=1,Xk=0)
adjEValHat[i,j]<-adjEValHat[i,j]+ a1*A1[k] + a2*(1-A1[k] )
}
}
}
return(adjEValHat)
}
seedN<-2022
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.25)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
library(BiCausality)
library(bnlearn)
resC<-BiCausality::CausalGraphInferMainFunc(mat)
adjustmentProb(resC$CausalGRes$EValHat,mat,xflag = 1)
adjustmentProb<-function(EValHat,mat,yflag=1,xflag=1)
{
#Work only positive asociation P(Y=yflag|X=xflag,Z)
n<-dim(Emat)[1]
D<-VecAlignment(mat)
A1<-numeric(n) # A[i] = Prob(Xi == 1)
adjEValHat<-matrix(0,nrow = n, ncol=n)
for(i in seq(n))
{
y1<-numeric(d) -1
y1[c(i)] <- 1 #supp(i)
A1[i]<-CondProb(D,y1,z=numeric(d)-1)$condP
}
for(i in seq(n))
for(j in seq(n))
{
if(EValHat[i,j]>0) # P(Xj|Xi)>0
# if xi has no parent
if(sum(EValHat[,i])==0)
{
adjEValHat[i,j]<-EValHat[i,j]
}
else # if xi has any parent(s), it needs adjustment
{
for(k in seq(n))
if(EValHat[k,i]>0)
{
print(sprintf("P(X%d =%d|X%d = %d,z%d)",j,yflag,i,xflag,k))
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(yflag)
z[c(i,k)]<-c(xflag,1)
a1<-CondProb(D,y=y,z=z)$condP # P(Xj=1|Xi=1,Xk=1)
z[c(i,k)]<-c(xflag,0)
a2<-CondProb(D,y=y,z=z)$condP # P(Xj=1|Xi=1,Xk=0)
adjEValHat[i,j]<-adjEValHat[i,j]+ a1*A1[k] + a2*(1-A1[k] )
}
}
}
return(adjEValHat)
}
seedN<-2022
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.25)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
library(BiCausality)
library(bnlearn)
resC<-BiCausality::CausalGraphInferMainFunc(mat)
resMat<-adjustmentProb(resC$CausalGRes$EValHat,mat,xflag = 1)
adjustmentProb<-function(EValHat,mat,yflag=1,xflag=1)
{
#Work only positive asociation P(Y=yflag|X=xflag,Z)
n<-dim(EValHat)[1]
D<-VecAlignment(mat)
A1<-numeric(n) # A[i] = Prob(Xi == 1)
adjEValHat<-matrix(0,nrow = n, ncol=n)
for(i in seq(n))
{
y1<-numeric(d) -1
y1[c(i)] <- 1 #supp(i)
A1[i]<-CondProb(D,y1,z=numeric(d)-1)$condP
}
for(i in seq(n))
for(j in seq(n))
{
if(EValHat[i,j]>0) # P(Xj|Xi)>0
# if xi has no parent
if(sum(EValHat[,i])==0)
{
adjEValHat[i,j]<-EValHat[i,j]
}
else # if xi has any parent(s), it needs adjustment
{
for(k in seq(n))
if(EValHat[k,i]>0)
{
print(sprintf("P(X%d =%d|X%d = %d,z%d)",j,yflag,i,xflag,k))
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(yflag)
z[c(i,k)]<-c(xflag,1)
a1<-CondProb(D,y=y,z=z)$condP # P(Xj=1|Xi=1,Xk=1)
z[c(i,k)]<-c(xflag,0)
a2<-CondProb(D,y=y,z=z)$condP # P(Xj=1|Xi=1,Xk=0)
adjEValHat[i,j]<-adjEValHat[i,j]+ a1*A1[k] + a2*(1-A1[k] )
}
}
}
return(adjEValHat)
}
seedN<-2022
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.25)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
library(BiCausality)
library(bnlearn)
resC<-BiCausality::CausalGraphInferMainFunc(mat)
resMat<-adjustmentProb(resC$CausalGRes$EValHat,mat,xflag = 1)
# mat2<-mat
# for(i in seq(d))
#   mat2[,i]<-as.numeric(mat[,i])
#
# res<-pc.stable(x=data.frame(mat2))
# bayeNet<-amat(res)
#
#
# trueMat<-matrix(nrow=d,ncol=d,0)
# trueMat[c(2,3),1]<-1
# trueMat[c(2,5),4]<-1
# trueMat[c(1,4),6]<-1
# trsTrueMat<-getTransitiveClosureMat(trueMat)
#
# print("baseline trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(bayeNet) ) )
# print("baseline directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = bayeNet ) )
resMat
adjustmentProb<-function(EValHat,mat,yflag=1,xflag=1)
{
#Work only positive asociation P(Y=yflag|X=xflag,Z)
n<-dim(EValHat)[1]
D<-VecAlignment(mat)
A1<-numeric(n) # A[i] = Prob(Xi == 1)
adjEValHat<-matrix(0,nrow = n, ncol=n)
for(i in seq(n))
{
y1<-numeric(d) -1
y1[c(i)] <- 1 #supp(i)
A1[i]<-CondProb(D,y1,z=numeric(d)-1)$condP
}
for(i in seq(n))
for(j in seq(n))
{
if(EValHat[i,j]>0) # P(Xj|Xi)>0
# if xi has no parent
if(sum(EValHat[,i])==0)
{
adjEValHat[i,j]<-EValHat[i,j]
}
else # if xi has any parent(s), it needs adjustment
{
for(k in seq(n))
if(EValHat[k,i]>0)
{
print(sprintf("P(X%d =%d|X%d = %d,z%d)",j,yflag,i,xflag,k))
z<-numeric(d)-1
y<-numeric(d)-1
y[j]<-c(yflag)
z[c(i,k)]<-c(xflag,1)
a1<-CondProb(D,y=y,z=z)$condP # P(Xj=1|Xi=1,Xk=1)
print(a1)
z[c(i,k)]<-c(xflag,0)
a2<-CondProb(D,y=y,z=z)$condP # P(Xj=1|Xi=1,Xk=0)
adjEValHat[i,j]<-adjEValHat[i,j]+ a1*A1[k] + a2*(1-A1[k] )
}
}
}
return(adjEValHat)
}
seedN<-2022
n<-500
d<-10
mat<-matrix(nrow=n,ncol=d)
for(i in seq(n))
{
set.seed(seedN+i)
mat[i,] <- rbinom(n=d, size=1, prob=0.25)
}
mat[,1]<-mat[,2] | mat[,3]
mat[,4] <-mat[,2] | mat[,5]
mat[,6] <- mat[,1] | mat[,4]
#library(BiCausality)
#library(bnlearn)
#resC<-BiCausality::CausalGraphInferMainFunc(mat)
resMat<-adjustmentProb(resC$CausalGRes$EValHat,mat,xflag = 1)
# mat2<-mat
# for(i in seq(d))
#   mat2[,i]<-as.numeric(mat[,i])
#
# res<-pc.stable(x=data.frame(mat2))
# bayeNet<-amat(res)
#
#
# trueMat<-matrix(nrow=d,ncol=d,0)
# trueMat[c(2,3),1]<-1
# trueMat[c(2,5),4]<-1
# trueMat[c(1,4),6]<-1
# trsTrueMat<-getTransitiveClosureMat(trueMat)
#
# print("baseline trs mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trsTrueMat, adjMat = getTransitiveClosureMat(bayeNet) ) )
# print("baseline directed mat")
# print( comparePredAdjMatrix2TrueAdjMat(trueAdjMat=trueMat, adjMat = bayeNet ) )
library(devtools)
document()
adjustmentProb(resC$CausalGRes$EValHat,mat)
document()
adjustmentProb(resC$CausalGRes$EValHat,mat)
num2Bits(num=10,n=4)
check()
spell_check()
spell_check()
document()
spell_check()
document()
spell_check()
version
devtools::build_manual()
devtools::build_manual()
?build_manual
check_man()
checkCRAN()
